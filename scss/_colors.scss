// Colors
$primary: rgb(22, 22, 211);
$secondary: rgb(201, 162, 162);
$info: rgb(233, 154, 9);
$error: rgb(194, 40, 40);

// Color Map
$colors: (
    "primary": $primary,
    "secondary": $secondary,
    "info": $info,
    "error": $error,
    "red": rgb(78, 25, 25),
    "green": rgb(28, 117, 28),
    "purple": #9900ff,
    "yellow": #6e6e19,
    "white": white,
    "black": black
);

// Spacing
$base-padding: 0.75rem;
$padding-sm: $base-padding;
$padding-lg: $base-padding * 2;
$padding-xl: $base-padding * 3;

$base-margin: 0.75rem;
$margin-sm: $base-margin;
$margin-lg: $base-margin * 2;
$margin-xl: $base-margin * 3;

$base-border-radius: 20px;

// Button Mixin
@mixin btn($color) {
    text-decoration: none;
    cursor: pointer;
    border: 0;
    display: inline-block;
    background-color: $color;
    color: white; // Default text color for buttons
    padding: $padding-sm $padding-lg;
    border-radius: $base-border-radius;
}

// Generate color classes
@each $name, $color in $colors {
    .text-#{$name} {
        color: $color;
    }

    .bg-#{$name} {
        background-color: $color;
    }

    @if $color != black and $color != white {
        // Generate light variants
        @for $i from 1 through 9 {
            .text-#{$name}-light-#{$i} {
                color: mix(white, $color, $i * 10%);
            }

            .bg-#{$name}-light-#{$i} {
                background-color: mix(white, $color, $i * 10%);
            }
        }

        // Generate dark variants
        @for $i from 1 through 9 {
            .text-#{$name}-dark-#{$i} {
                color: mix(black, $color, $i * 10%);
            }

            .bg-#{$name}-dark-#{$i} {
                background-color: mix(black, $color, $i * 10%);
            }
        }
    }

    // Button classes
    .btn-#{$name} {
        @include btn($color);
    }

    .btn-outlined-#{$name} {
        @include btn(white);
        background-color: white;
        color: $color;
        border: 2px solid $color;
    }
}

// Generate margin classes
@for $i from 1 through 4 {
    .m-#{$i} {
        margin: #{$i * $margin-sm};
    }
}

// Generate padding classes
$p: 1;

@while $p <= 8 {
    .p-#{$p} {
        padding: #{$p * $padding-sm};
    }

    $p: $p * 2;
}

// Responsive breakpoints
$breakpoints: (
    small: 600px,
    medium: 900px,
    large: 1200px
);

@each $name, $size in $breakpoints {
    @media (min-width: #{$size}) {
        .container-#{$name} {
            width: $size;
        }
    }
}
